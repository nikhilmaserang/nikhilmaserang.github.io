Binary Numbers
Algorithms are sets of instructions which manipulate data
Data is information, like numbers or letters
There are many datatypes, which have different limits and uses
Boolean type:
Integer types:
Decimal types:
Char type:

Datastructures are ways to organize data so that it can be stored and retrieved.
Datastructures can have different organization schemes, which is primarily what sets different datastructure types apart.
For now we'll deal with datastructures which use a key-value organizational scheme.

First datastructure we'll look at is:
Arrays/lists/vectors
- key is an integer

String is an array of chars, sometimes is counted as its own primitive type

Next:
Dictionaries/maps
- key is a string normally

If we want to manipulate data, what we need are variables; variables allow us to modify and compare the values of data in our programs.
A variable normally must be 'declared', meaning we tell the computer what the name of the variable is (how we will refer to it in our code) and what datatype it will be.
This lets the computer know in advance how much space to reserve for it: if we declare a byte type variable x, it knows it only needs to allocate 8 bits of memory for it.
Some languages, however, we don't need to tell the computer what type a variable will be, and it will figure it out from context.
In Java, I might declare a variable which stores the number of cats like so:
int numCats;
All I've done is stated that the variable numCats will be an integer type.

To give a variable a value, we have to use the 'assignment operator', which in most languages is '='.
We can do variable assignment either during the variable's declaration or afterwards.
As an example in Java, we could have the following code:

int x;
x = 5;

or we could have:

int x = 5;

Either would be acceptable ways to declare the integer x and assign it to 5. Notice that the value on the right is assigned to the variable on the left of the assignment operator.

Statements:
Notice that the above code snippets all ended with semicolons (;): in Java, all *statements* must end with semicolons.
In Python, statements can have semicolons, but are mostly indicated by a line break.
Computer code is essentially made up of many many individual statements, which each do one small thing. Together, those small actions combine as algorithms and can do powerful things.

Operators:
Above, we learned about the assignment operator, which sets a variable to a specific value. However, there are many more operators than this, broken into several categories:
arithmetic, relational, logical, unary, and bitwise/bitshift. I'm going to skip the bitwise/bitshift operators, because I talked about them on the binary numbers page.
Arithmetic + - * / %
Relational > >= < <= ==
Logical AND OR NOT 
Unary - ++ --

Concatenation
Escape Characters
Casting

Expressions in computer science are very similar to expressions in math.
In math, an expression is a mix of numbers and operations which can be 'evaluated' to obtain a final result. For example,
5 + (3 - 7) * 4 is an expression, which when evaluated becomes -11.
Expressions follow a predefined and universally agreed-upon order of operations, which in math is normally remembered with the acronym PEMDAS.
Parenthesis, Exponentiation, Multiplication, Division, Addition, Subtraction.

Similarly, in computer science, an expression can be evaluated, and it will yield either a number or a true/false value.
The order of operations for evaluating expressions in computer science is normally PEMDAS, but may vary slightly for different languages.

For example, if I have a variable x and a variable y, where x equals 3 and y equals 4, the expression x < y evaluates to True, while the expressions x > y or x == y evaluate to False.
The reason I used x == y instead of x = y is because x = y assigns the value stored in y to the variable x, so the '==' operator determines equivalency while the '=' operator assigns the value on the right to the variable on the left.

Another example: 0.5 * (3 + 17) > x + y evaluates to 10 > 7 which evaluates to True.

Logical operators are a bit different from mathematical operators because they operate on True/False values. There are three main logical operators: AND, OR, and NOT.
USE A TABLE
AND
OR
NOT

DEMORGAN's LAW

Conditionals
If
Else
Else If

Loops
For
While

Multidimensional Datastructures

Procedural Programming 

Functions
A function is a mapping between inputs and outputs; it is a set of instructions which dictate what should be done to a set of inputs to create the corresponding set of outputs.

In math - depending on your level, you may have experience with functions of varying dimensionality, but most people have probably encountered functions that take in a single input and return a single output.
Some commonly understood examples: sin(x), cos(x), ln(x)
We can also define our own functions: f(x) = x + 7 is a simple example, where the input is a variable x, and the output is whatever x was, plus 7.

In computer science, it is much the same: a function takes in several pieces of data, which are called <i>parameters</i>.
These parameters are variables, because like in the example f(x) = x + 7 above, we don't know ahead of time what x will equal.
We use control structures (remember if, else if, else, and while?) to manipulate the parameters and get our desired outputs
In some programming languages, functions can only have one output, while in others functions can have an arbitrary amount of outputs.

The main benefits of functions are that you can write some code to perform a specific task once, and then reuse it as much as you want.

Example Function 1

Let's now look at an example function and break down some of its parts.

FUNCTION addSeven(inputNumber):
{
	outputNumber = inputNumber + 7
	return outputNumber
}

As you can see, we start with the function declaration, which tells the computer that this code block is going to be a function, called 'addSeven', which accepts one parameter, called 'inputNumber'.
Inside the body of the function, we have two statements. The first one creates a variable called outputNumber and sets it equal to the value stored in inputNumber, plus seven.
The second statement 'returns' the value, which essentially says "I'm done with my computations; here's the output'.

So now that we've defined a function, how do we use it? Let's look at an example expression:

15 - addSeven(2)

We have a "function call" to the function 'addSeven', where we 'pass' the value 2 to the function.
In this case, the value 2 is the 'argument'. An argument is a value 'passed into' a function, which when inside the function is represented as one of the parameters.
If we look back at the function, we can see that the input number has the number 7 added to it and then is returned, so in our expression, the addSeven(2) term will evaluate to 2 + 7 = 9.
Therefore, the expression becomes 15 - 9, which evaluates to 6.

Example Function 2

Let's look at another, slightly more complicated example:

FUNCTION sum(num1, num2):
{
	return num1 + num2
}

Here, we can see that we have a function called 'sum', which accepts two parameters, num1 and num2.
The body of the function consists of a single return statement, which returns the sum of num1 and num2.
Note that the return keyword returns the value of the expression which follows it, meaning we can use any expression (including num1 + num2).

Libraries and Modules

OOP

Object Oriented Programming attempts to make programming more understandable and intuitive to humans by introducing the idea of an 'object'.
In the real world, we can group objects into categories which all have the same properties and behaviors, but each object might have a different value for a particular property.
For example, all bicycles have a frame made out of some material; however, different bicycles might be made out of different materials.

OOP lets us define our own 'categories' of objects, which we call <i>classes</i>.
These classes will have properties and behaviors: for example, if we made a bicycle class, it might have a wheel_size property, and a handle_shape property, etc.
We can then make specific <i>instances</i> of those classes, which actually have values for those variables; each instance we make could have different values, but they'd all share the type of object that they are: a bicycle.

Another way to think of it is like this: a class is like a blueprint or a general description of what properties and behaviors an object might have; it's the <i>idea</i> of what a bicycle is.
An instance of an object is an actual thing you'd encounter out in the real world; it's the bicycle which might almost knock you off the pavement while you're on your evening walk.
The bicycle idea tells us that bicycles have a frame which has a color, but different bicycles can have different colors.

Fields/Methods

Inheritance

Interfaces